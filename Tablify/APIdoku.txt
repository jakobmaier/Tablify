User-API
########
    This documentation only contains information about the user-API.
    There might be members/functions publicy available to the user which are reserved for internal usage only - this kind of members/functions ARE NOT DOCUMENTED here and are usually marked "[Internal]".
    This API will get an online representation as soon as it reached a stable state.



TableStore (Singleton)
***********************************************************
    tableList               readonly Table[]                                                        // List with all Tables, that are currently active on the web page

    getTableByElement       (table: Selector): Table                                                // Returns the Table-instance that manages a specific HTMLTableElement. If the given HTMLElement is not managed by any Table instance, null is returned
    getTableById            (tableId: string): Table                                                // Returns the Table-instance with a specific id. If the id does not exist, null is returned
    getTable                (table: string|Selector): Table                                         // Returns the requested Table instance.
Eventhandlers:
    onTableRegistered       (table: Table) => void = null;                                          // Is called everytime a new table is initialised
    onTableUnregistered     (table: Table) => void = null;                                          // Is called everytime an existing table is destroyed




Table (Manages exacly one HTMLTableElement)
***********************************************************
    table                   readonly JQuery                                                         // References the HTML table element
    tableId                 readonly string                                                         // Unique table id

    constructor             (target?: Selector)                                                     // Creates a new Table / manages a HTMLTableElement
    constructor             (tableDef: TableDefinition, target?: Selector)                          // Creates a new Table / manages a HTMLTableElement

    representsTable         (table: Selector): boolean                                              // Returns true, if the table manages the given HTMLelement
    destroy                 (): void                                                                // Destroys the Tablify Table. This object will get unusable.

    isPartOfDOM             (): boolean                                                             // Returns true, if the table is part of the DOM
    appendTo                (target: Selector): Table                                               // Inserts the table at the end of the target. If the table is already part of the DOM, it will be moved rather than cloned.
    prependTo               (target: Selector): Table                                               // Inserts the table at the beginning of the target. If the table is already part of the DOM, it will be moved rather than cloned.

    addColumn               (columnDef?: ColumnDefinition): Column                                  // Adds a new column to the table.
    addRow                  (rowDef?: RowDefinition): Row                                           // Adds a new row to the table
    addTitleRow             (rowDef?: RowDefinition): Row                                           // Same as "addRow", but the rowType is always a titleRow.
    addBodyRow              (rowDef?: RowDefinition): Row                                           // Same as "addRow", but the rowType is always a bodyRow.

    getRowPosition          (identifier: string|Row): number                                        // Returns the position of a specific row within the table. (=index).
    getColumnPosition       (identifier: string|Column): number                                     // Returns the position of a specific column within the table. (=index).

    removeRow               (identifier: string|number|Row): Table                                  // Removes the specified row.
    removeColumn            (identifier: string|number|Column): Table                               // Removes the specified column.

    getRows                 (rowType?: RowType): Row[]                                              // Returns all rows within the table or table section (title/body)
    getRow                  (identifier: string|number|Row): Row                                    // Returns the required row. A row contains all cells.
    getColumns              (): Column[]                                                            // Returns all columns within the table.
    getColumn               (identifier: string|number|Column): Column                              // Returns the required column. The column does not contains cells.
    getColumnCells          (identifier: string|number|Column): { [key: string]: Cell; }            // Returns all cells of a sepcific column.
    getCell                 (rowIdentifier: string|number|Row, columnIdentifier: string|number|Column): Cell    // Returns the specified cell.
    getRowCount             (rowType?: RowType): number                                             // Returns the number of rows in the table or table section (title/body)
    getColumnCount          (): number                                                              // Returns the number of columns in the table

    static getUniqueTableId (): string                                                              // Returns a new, unique id that can be used for a new table
    getUniqueRowId          (): string                                                              // Returns a new, unique id that can be used for rows in this table
    getUniqueColumnId       (): string                                                              // Returns a new, unique id that can be used for columns in this table

    toObject                (includeContent?: boolean): TableDescription                            // Converts the Table into an object. Used for serialisation.
    static defaultTableDefinitionDetails    TableDefinitionDetails                                  // Default options that are used in the constructor, if the user omitted them.




Row (Manages exacly one row within a Table)
***********************************************************
    rowId                   readonly string;                                                        // internal id, unique within the table
    rowType                 readonly RowType;                                                       // title- / body- / footer- row

    remove                  (): void                                                                // Removes the row from its table.
    equals                  (other: Row): boolean                                                   // Checks if the given row is the same as this row.

    getCell                 (column: string|number|Column): Cell                                    // Returns the cell of a sepcific column.
    getCells                (): { [key: string]: Cell; }                                            // Returns all cells of this row

    toObject                (includeContent?: boolean): RowDescription                              // Converts the Row into an object. Used for serialisation.
    static defaultRowDefinitionDetails      RowDefinitionDetails                                    // Default options that are used in the constructor, if the user omitted them.

Column (Contains basic column Information, similar to a plain datatype)
***********************************************************
    columnId                readonly string                                                         // internal id, unique within the table
    defaultTitleContent     Cell                                                                    // Is used for rendering title cells that have no content
    defaultBodyContent      Cell                                                                    // Is used for rendering body cells that have no content

    remove                  (): void                                                                // Removes the column from its table.
    equals                  (other: Column): boolean                                                // Checks if the given column is the same as this column.

    getCell                 (row: string|number|Row): Cell                                          // Returns the cell of a sepcific row.
    getCells                (): { [key: string]: Cell; }                                            // Returns all cells of this column

    toObject                (): ColumnDescription                                                   // Converts the Column into an object. Used for serialisation.
    static defaultColumnDefinitionDetails   ColumnDefinitionDetails                                 // Default options that are used in the constructor, if the user omitted them.

Cell
***********************************************************
    content                 readonly string;                                                        // content of the cell. Might contain HTML.

    toObject                (): CellDescription                                                     // Converts the Cell into an object. Used for serialisation.
    static defaultCellDefinitionDetails     CellDefinitionDetails                                   // Default options that are used in the constructor, if the user omitted them.



Tablify (module)
***********************************************************
    tableStore              TableStore                                                              // singleton instance
    tablify                 (object: Object|Array<any>|any, target?: Tablify.Selector): Table       // converts any object into a Table

    Array.tablify           (target?: Tablify.Selector): Tablify.Table                              // shortcut for Tablify.tablify(theArray, target)

Exceptions
***********************************************************
    OperationFailedException            Exception object that is thrown by Tablify if an operation failed.






TableDescription - How to initialise a table:
***********************************************************
    {   columns: [
            "columnId1",                            //string = columnId
            {   columnId: "id2",                    //object = ColumnDescription
                defaultTitleContent: "content",     //string = Cellcontent
                defaultBodyContent: {               //object = Celldescription (note: existing cell is also possible)
                    content: "data"
                }
            },
            {},                                     //all ColumnDescription properties are optional
            new Column(),                           //object = existing column
            ...
        ],
        rows: [
            "rowId1",                               //string = rowId
            {   rowId: "id2",                       //object = RowDescription
                content: {                          //object = ColumnDescription
                    "columnId1": "content",         //string = Cellcontent
                    "id2": {                        //object = Celldescription
                        content: "data"
                    },
                    other: {},                      //all Celldescription properties are optional
                    other: new Cell(),              //object = existing column
                    ...
                }
            },
            {},                                     //all Rowdescription properties are optional
            new Row(),                              //object = existing row
            ...
        ],
        titleRowCount: 0                            //number of rows, that belong to the title
    }





Todos:
############


cell/row/column: --> für die (public) properties einen setter definieren, und bei verwendung auch gleich das HTML aktualisieren :)

optimise "Parse HTML" events





todo: table.destroy -> wenn die table teil einer anderen table ist, muss in der parentTable "Table" mit "jQuery" ausgetauscht werden. ==> Eventhandler
parentCell austauschen, und stattdessen eventHandler definieren




Für cells optional ein "toObject()" übergeben lassen -> Kombination aus jQuery und Table im content möglich. Auch das "withData" ist customiseable


